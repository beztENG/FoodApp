{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { Cart } from '../shared/models/Cart';\nimport { CartItem } from '../shared/models/CartItem';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = this.getCartFromLocalStorage();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) return;\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) return;\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocalStorage() {\n    this.cart.totalPrice = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocalStorage() {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,IAAI,QAAQ,uBAAuB;AAE5C,SAASC,QAAQ,QAAQ,2BAA2B;;AAKpD,OAAM,MAAOC,WAAW;EAGtBC;IAFQ,SAAI,GAAS,IAAI,CAACC,uBAAuB,EAAE;IAC3C,gBAAW,GAA0B,IAAIL,eAAe,CAAC,IAAI,CAACM,IAAI,CAAC;EAC3D;EAEhBC,SAAS,CAACC,IAAS;IACjB,IAAIC,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKL,IAAI,CAACK,EAAE,CAAC;IACrE,IAAGJ,QAAQ,EACT;IAEF,IAAI,CAACH,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC,IAAIZ,QAAQ,CAACM,IAAI,CAAC,CAAC;IACxC,IAAI,CAACO,qBAAqB,EAAE;EAC9B;EAEAC,cAAc,CAACC,MAAc;IAC3B,IAAI,CAACX,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,IAAI,CAACI,KAAK,CAACQ,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,IAAII,MAAM,CAAC;IACxE,IAAI,CAACF,qBAAqB,EAAE;EAC9B;EAEAI,cAAc,CAACF,MAAa,EAAEG,QAAe;IAE3C,IAAIX,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKI,MAAM,CAAC;IACpE,IAAG,CAACR,QAAQ,EAAE;IAEdA,QAAQ,CAACW,QAAQ,GAAGA,QAAQ;IAC5BX,QAAQ,CAACY,KAAK,GAAGD,QAAQ,GAAGX,QAAQ,CAACD,IAAI,CAACa,KAAK;IAC/C,IAAI,CAACN,qBAAqB,EAAE;EAC9B;EAEAO,SAAS;IACP,IAAI,CAAChB,IAAI,GAAG,IAAIL,IAAI,EAAE;IACtB,IAAI,CAACc,qBAAqB,EAAE;EAC9B;EAEAQ,iBAAiB;IACf,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAEQV,qBAAqB;IAC3B,IAAI,CAACT,IAAI,CAACoB,UAAU,GAAG,IAAI,CAACpB,IAAI,CAACI,KAAK,CACrCiB,MAAM,CAAC,CAACC,OAAO,EAACC,WAAW,KAAKD,OAAO,GAAGC,WAAW,CAACR,KAAK,EAAE,CAAC,CAAC;IAChE,IAAI,CAACf,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACxB,IAAI,CAACI,KAAK,CACrCiB,MAAM,CAAC,CAACC,OAAO,EAAEC,WAAW,KAAGD,OAAO,GAAGC,WAAW,CAACT,QAAQ,EAAE,CAAC,CAAC;IAElE,MAAMW,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,IAAI,CAAC;IAC1C4B,YAAY,CAACC,OAAO,CAAC,MAAM,EAACJ,QAAQ,CAAC;IACrC,IAAI,CAACP,WAAW,CAACY,IAAI,CAAC,IAAI,CAAC9B,IAAI,CAAC;EAClC;EAEQD,uBAAuB;IAC7B,MAAM0B,QAAQ,GAAGG,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAON,QAAQ,GAAEC,IAAI,CAACM,KAAK,CAACP,QAAQ,CAAC,GAAE,IAAI9B,IAAI,EAAE;EACnD;EAAC;qBApDUE,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAoC,SAAXpC,WAAW;IAAAqC,YAFV;EAAM","names":["BehaviorSubject","Cart","CartItem","CartService","constructor","getCartFromLocalStorage","cart","addToCart","food","cartItem","items","find","item","id","push","setCartToLocalStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","cartSubject","asObservable","totalPrice","reduce","prevSum","currentItem","totalCount","cartJson","JSON","stringify","localStorage","setItem","next","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\--HOCKY_2_NAM_3\\DoAnLapTrinh\\FoodOrder\\Food\\FoodApp\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Cart } from '../shared/models/Cart';\nimport { Food } from '../shared/models/food';\nimport { CartItem } from '../shared/models/CartItem';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart: Cart = this.getCartFromLocalStorage();\n  private cartSubject: BehaviorSubject<Cart> = new BehaviorSubject(this.cart)\n  constructor() { }\n\n  addToCart(food:Food):void{\n    let cartItem = this.cart.items.find(item => item.food.id === food.id)\n    if(cartItem)\n      return;\n\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n\n  removeFromCart(foodId: string):void{\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n\n  changeQuantity(foodId:string, quantity:number)\n  {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if(!cartItem) return;\n\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n\n  clearCart(){\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n\n  getCartObservable():Observable<Cart>{\n    return this.cartSubject.asObservable();\n  }\n\n  private setCartToLocalStorage():void{\n    this.cart.totalPrice = this.cart.items\n    .reduce((prevSum,currentItem) => prevSum + currentItem.price, 0)\n    this.cart.totalCount = this.cart.items\n    .reduce((prevSum, currentItem)=>prevSum + currentItem.quantity, 0)\n      \n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart',cartJson);\n    this.cartSubject.next(this.cart);\n  }\n\n  private getCartFromLocalStorage():Cart{\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson? JSON.parse(cartJson): new Cart();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}